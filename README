Warmup for CS555

Messages creates a set of processes P that are launched on different machines. 
At each process, it will read information about this set of processes from a text file: each line in the 
file will contain the host and port information for the process comprising this set. A process should 
never attempt to connect to itself; so it should not appear its list of available processes. It follows that 
the config file at each process will be different. 

Each process participates in a set of rounds. Each round involves a process connecting to a randomly 
chosen process in the set of processes  P. All communications in the system will be based on TCP. 
Once a connection is established to a random node, the initiating process sends a specified number of messages to the
targeted process. The payload of each message is a random integer (positive or negative). At the end 
of each round the socket connection is closed and the process is repeated by choosing another node at 
random from the set P. Each process will initiate 5000 such rounds


COMMUNICATIONS: 
	Classes that abstract links (connections) between two machines
	
NODE:
	Classes that each node uses to keep track of the system state
	
UTILITIES:
	Class that has functions used throughout the program. 
	
WIREFORMATS:
	Classes that represent the objects sent on the wire. Each class can serialize/un-serialize itself
	

********************** Running the Program **************************
in asg1/src:

	There should be a config file specifying all of the peers in the system:
			system-one port-one
			system-two port-two
			    
From asg1/src:
	
	make
	java cs555.messages.node.Node PORT CONFIG-FILE <# of rounds> <messages per round>

 